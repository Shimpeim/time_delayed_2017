{
    "collab_server" : "",
    "contents" : "#R --vanilla --quiet < simu.permtest_test_20160817_args.R --args  50 10000 YDL110C_YDR122W Selevsek_2015_all_Selevsek_20160706.RData batch_1  > Simulation_permtest_20160817_1.log 2>&1 &\n\n# save.image(\n#     sprintf(\n#        '%s/%s',\n#        outputDirectry.prefix,\n#        'simu.permtest_test_20160803_.RData'\n#        )\n#     )\n\nc_args <- commandArgs(trailingOnly=T)\nc_sampleSize       <- c_args[1]\nc_itt_of_permute   <- c_args[2]\nc_id.select        <- c_args[3] # FMT : geneName1_geneName2_ ...\nc_makedataData     <- c_args[4]\nc_outdat_surfix    <- c_args[5]\n\n#\n#\n#c_sampleSize       <- '100'\n#c_itt_of_permute   <- '10000'\n#c_id.select        <- 'a_b' #_c' #_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z'\n#c_makedataData     <- 'Selevsek_2015_all_Selevsek_20160706.RData'\n#\n#\n\nsim.cols <- paste('V',c(1:5),sep='')\nitt_of_permute <- as.numeric(c_itt_of_permute)\nmakedataData <- c_makedataData\n\nsampleSize <- as.numeric(c_sampleSize) # N of random sampled data for each rho \n\noutprefix      <- sprintf('%s_permute_%s_%s','alpha_error_simulation_permtest_itt_',c_itt_of_permute,c_outdat_surfix)\nbioproc        <- sprintf('%s','_MultValNorm_cov_')\noutputDirectry.prefix          <- './'\n#outputDirectry.prefix         <- '/Users/mos/Dropbox/Draft_201603Morimoto/Analysis/PG/Simulation/Permu.test/test/20160817'\n\ndataDirectry <- './'\nfuncDirectry <- './'\npkgsDirectry  <- './'\n\n#dataDirectry <- '/Users/mos/Dropbox/Draft_201603Morimoto/Analysis/PG/Simulation/Permu.test/test/20160817/'\n#funcDirectry <- '/Users/mos/Dropbox/Draft_201603Morimoto/Analysis/PG/Simulation/Permu.test/test/20160817/'\n#pkgsDirectry <- '/Users/mos/Dropbox/Draft_201603Morimoto/Analysis/PG/Simulation/Permu.test/'\n\n\nrho.interTemporal <- FALSE # convert data for corr.Rho calc. to inter-temporal ?\n\n#```{r prefix for output files}\n\nhistogram.pdf.prefix        <- 'histogram'\n\nscat_plot.pdf.prefix        <- 'scatt_'\nline_plot.pdf.prefix        <- 'line_'\n\nperm_null_rho_histo.pdf.prefix <- 'permNullDistHisto'\npermuted_Rho.csv.prefix        <- 'permuted_Rho'\n\nRData_PermRhoAnalysis_save.image.prefix <- 'permuted_Rho'\n\n#```\n\n#```{r functions sorce code file}\n\npermtRho   <- 'func_for_permutest_of_Rho_20160819.R' \ndataManu   <- 'OldFunc_20151125.R'\nEscoreCalc <- 'func_for_calcEscore_20160123.R' # modified: 2016/01/23\n#```\n\n\n#```{r Load libraries}\n\n## LIBRARIES\n\npackages <- c(\n  'MASS',\n  'dplyr', # progress bar\n  'plyr',  # progress bar\n  'dplyr', # progress bar\n  'tidyr',\n  'stringr',\n  'xlsx',\n  'ggplot2',\n  'gplots',\n  'GMD',\n  'reshape2',\n  'pander',\n  'matrixcalc'\n) \n\nnew.packages <-\n  packages[!(packages %in% installed.packages())] \n# installed.packages() returns installed packages \n\nif(length(new.packages) > 0){ \n  install.packages(new.packages, repos='http://cran.us.r-project.org')\n}\nrequire('MASS')\nrequire('plyr')  # progress bar\nrequire('dplyr') # progress bar\nrequire('tidyr')\nrequire('stringr')\nrequire('xlsx')\nrequire('ggplot2')\nrequire('gplots')\nrequire('GMD')\nrequire('pvclust')\nrequire('reshape2')\nrequire('pander')\nrequire('matrixcalc')\n\n#```\n\nid.select <- unlist(                   # Genes in the analysing gene-cluster\n  str_split(c_id.select, '_', n=Inf)\n)\n\n#Functions for HCA\n#```{r}\nsource(file = sprintf('%s%s',funcDirectry,EscoreCalc)) ## added 2015/11/24 SM\n## source code was moved to EscoreCalc\n#```\n\n#Functions for data manupilation\n#```{r}\nsource(file = sprintf('%s%s',funcDirectry,dataManu)) ## added 2015/11/24 SM\n## source code was moved to EscoreCalc\n#```\n\n#Functions for Correlation test\n#```{r}\nsource(file = sprintf('%s%s',funcDirectry,permtRho)) ## added 2015/11/24 SM\n## source code was moved to permRho\n#```\n\n##====================##\n## Simulation dataset ##\n##====================##\n\n# Sigma matrix from Observed data\n\nload(\n  file = sprintf(\n    '%s%s',\n    dataDirectry,\n    makedataData\n    )\n  )\n\ndata_ana_norm <- dataGQ[\n    duplicated(dataGQ$id)|duplicated(dataGQ$id,fromLast=TRUE),\n    ] %>%\n  gather(var,val,-id,-dtname) %>%\n  rename(val2=val) %>%\n  group_by(id,dtname) %>%  \n  mutate(val=scale(val2, center = TRUE, scale = TRUE)) %>%\n  dplyr::select(-val2)%>%\n  ungroup()%>%\n  data.frame() %>%\n  spread(key = var,value=val)\n\nnorm_trc <- data_ana_norm%>%\n  filter(dtname=='trc')\nnorm_prt <- data_ana_norm%>%\n  filter(dtname=='prt')\n\nSigma_norm_trc  <- cov(norm_trc[,cols])#,method='s')\nSigma_norm_prt  <- cov(norm_prt[,cols])#,method='s')\n\n\n\n#\n\nSimSet <- sampleSize\nid.select <- unlist(                   # Genes in the analysing gene-cluster\n  str_split(c_id.select, '_', n=Inf)\n  )\n\ncross.corr.mvr_obscor <- function(output.name,SimSet,dtname,Sigma_mat){\n  X_sigma_set  <- data.frame()\n  SimSet_update <- SimSet\n  count_update  <- 0\n  sim.cols <- cols\n  Sigma <- Sigma_mat\n  \n\n    X_all <- as.data.frame(\n      mvrnorm(n = SimSet_update*length(id.select), \n              rep(0, length(sim.cols)),\n              Sigma_mat,\n              tol = 1e-10,\n              empirical=T\n      )\n    ) %>%\n      cbind(\n        count    =rep(\n          seq( from=count_update+1,to=sum(count_update,SimSet),by=1 ),\n          each=length(id.select)\n        ),\n        gene   = rep(id.select,SimSet),\n        dtname = rep(\n          c(dtname),\n          SimSet*length(id.select))\n      ) %>%\n      gather(\n        key = var,\n        value=val,\n        -count,-dtname,-gene\n      ) %>%\n      mutate(\n        var.ori = match(var,sim.cols)  , \n        var.new = match(var,sim.cols) + 1\n      )\n    \n    X_sigma <- X_all %>%\n      inner_join(\n        X_all,\n        by=c(\n          'var.ori'='var.new',\n          'count','dtname','gene'\n          )\n      ) %>%\n      dplyr::select(\n        -var.ori,-var.ori.y,-var.new\n      ) %>%\n      ddply(\n        .(count,dtname),\n        cor.test_by.id,\n        'val.y','val.x',\n        method.cor='spearman',\n        .progress='text'\n      ) %>%\n      inner_join(X_all,by=c('count','dtname')) \n    X_sigma_set    <- rbind(X_sigma_set,X_sigma)\n\n  return(X_sigma_set)\n}\n\nsim_norm_10000_trc <- cross.corr.mvr_obscor(\n  sim_norm_10000,\n  SimSet=sampleSize,\n  dtname='trc',\n  Sigma_mat=Sigma_norm_trc\n  ) %>%\n  rename(count2 = count)\n\nsim_norm_10000_prt <- cross.corr.mvr_obscor(\n  sim_norm_10000,\n  SimSet=sampleSize,\n  dtname='prt',\n  Sigma_mat=Sigma_norm_prt\n  )%>%\n  rename(count2 = count)\n\n######################## 2016/8/18\n########################\n\nwrite.csv(\n  rbind(\n    sim_norm_10000_trc,\n    sim_norm_10000_prt\n    ),\n          file = sprintf(\n            '%s%s_%s_%s.csv',\n            outputDirectry.prefix,\n            outprefix,\n            bioproc,\n            'simu_dat_20160818')\n)\n\n\n##================================##\n## Choose 10 representation data  ##\n##================================##\n\nsim.dat.sample <- rbind(\n  data.frame(  sim_norm_10000_trc,rho.which='observed'),\n  data.frame(  sim_norm_10000_prt,rho.which='observed')\n  ) %>%\n  filter(\n    count2 %in% c(1:10)\n    )  %>%\n  mutate(id = paste('SimNo.',count2,sep='')) %>%\n  dplyr::select(-count2) \n  \n\nsim.dat.sample_rho.est <- sim.dat.sample %>%\n  filter(dtname=='trc') %>%\n  inner_join(sim.dat.sample %>%\n               filter(dtname=='prt'),\n             by=c(\n               'id',\n               \"var\",\n               \"var.ori\",\n               \"var.new\",\n               'gene',\n               \"rho.which\"\n               )\n             ) %>%\n  ddply(\n    .(id,rho.which),\n    cor.test_by.id,\n    'val.x',\n    'val.y'\n    ) %>%\n  rename(\n    rho= rho.est\n    ) %>%\n  inner_join(\n    sim.dat.sample,\n    by=c('rho.which','id')\n    )\n\n#```{r make pdf file of time series line plots}\nline.plot <- function(data){\n  theme_set(theme_classic(base_size = 18, base_family = 'Helvetica'))\n  id <- data$id[1]\n  rho.which <- data$rho.which\n  rho       <- round(data$rho,2)\n#  rho.bwtp  <- round(data$rho.bw.tp,2)\n  rho.bwtp  <- ''\n  p <- ggplot(data %>%\n                mutate(timepoint=paste('timepoint ',var)),\n              aes(x=var,y=val,group=dtname)\n  )\n  plot.type <- geom_line(aes(colour=dtname),size=1.5)\n  plot.theme <- theme(\n    legend.background=element_blank(),\n    panel.grid.major=element_blank(), \n    panel.grid.minor=element_blank(), \n    panel.background=element_rect(colour=\"black\", fill=\"white\"))\n  plot.bg    <- theme_bw()\n  plot.title <- labs(\n    list(\n      title = paste(\n        id,' [Rho(intertemporal)=',rho,'(',rho.bwtp,')]',#,count:',edge,']',\n        sep=''\n      )\n    )\n  )\n  plot( p+ plot.type+ plot.theme + plot.title)\n}\n\npdf(\n  sprintf(\n    '%s%s_%s_%s_.pdf',\n    outputDirectry.prefix,\n    outprefix,\n    bioproc,\n    line_plot.pdf.prefix\n  ),\n  width=16,\n  height=10\n)\nline.plot.list <- \n  dlply(\n    sim.dat.sample_rho.est,\n    .(rho.which,id,gene),\n    line.plot\n  ) \ndev.off()\n\n\n#```{r plotting scatter plot}\n\nscat.plot_permu.simu <- function(data,x.lab,y.lab){\n\n  shape_basket <- c(8,15,16,17,18,19) # plot shape selecter. (ref. help(shape) {ggplot2})\n\n  id   <- as.character(data$id[1])\n  gene <- as.character(data$gene)\n  rho.which <- as.character(data$rho.which[1])\n  rho       <- round(data$rho[1],2)\n\n  p <- ggplot(data %>%\n                mutate(timepoint=paste('timepoint #',var)\n                ),\n              aes(x=x,y=y,group=timepoint))\n  \n  if(length(unique(data$id))<=6){\n    plot.type <- geom_point(aes(colour=timepoint,shape=gene),size=15,alpha=0.6)\n  }else{\n    plot.type <- geom_point(aes(colour=timepoint,shape=gene),size=4,alpha=0.6)\n  }\n  \n  if(length(unique(data$gene))<=6){\n    plot.shape <- scale_shape_manual(values=shape_basket[c(1:length(unique(data$gene)))])\n  }else{\n    plot.shape <- scale_shape_manual(values=rep(18,length(unique(data$gene))))\n  }\n  \n  legends.guide <-guides(\n    guide_legend(keywidth = 0.3, keyheight = 0.3,nrow = 2, byrow = TRUE)\n  )\n  plot.title <- labs(\n    list(\n      title = paste(\n        id,\" [Spearman's r(intertemporal)=\",rho,'(',rho.which,')]',#,count:',edge,']',\n        sep=''\n      ),\n      x=x.lab,y=y.lab\n    )\n  )\n  plot.bg <- theme_bw()\n  plot( p+ plot.type+ plot.shape + plot.title + plot.bg +legends.guide )\n}\n\npdf(\n  sprintf(\n    '%s%s_%s_%s.pdf',\n    outputDirectry.prefix,\n    outprefix,\n    bioproc,\n    scat_plot.pdf.prefix\n  )\n  ,width=16,\n  height=10\n)\nscat.plot.list <- dlply(\n  sim.dat.sample_rho.est %>% \n    dplyr::select(\n      val, id, dtname, var.ori, rho, rho.which,gene\n      )%>%#,-rho.bw.tp,-p.bwtp) %>% \n    spread(key=dtname,value=val) %>%\n    rename(var=var.ori,x=trc,y=prt),\n  .(id),\n  scat.plot_permu.simu,'mRNA','Protein') # ALL GENES\ndev.off()\n\npdf(\n  sprintf(\n    '%s%s_%s_%s_bwtp.pdf',\n    outputDirectry.prefix,\n    outprefix,\n    bioproc,\n    scat_plot.pdf.prefix\n  )\n  ,width=16,\n  height=10\n)\nscat.plot.list <- dlply(\n  sim.dat.sample_rho.est %>% \n    dplyr::select(\n      val, id, dtname, var.ori, rho, rho.which,gene\n      ) %>%\n    inner_join(\n      sim.dat.sample_rho.est %>% \n        dplyr::select(\n          val, id, dtname, var.new, rho, rho.which,gene\n          ) ,\n      by=c(setNames('var.new','var.ori'),'id','dtname','gene','rho.which','rho')\n    ) %>%\n    dplyr::rename( x=val.x, y=val.y, var=var.ori) %>%\n    mutate(gene=paste(gene,dtname,sep='_')),\n  .(rho.which,id), \n  scat.plot_permu.simu,\n  x.lab='TimePoint = t-1',y.lab='TimePoint = t') # ALL GENES\ndev.off()\n\n#```\n#Empirical test of Rho /n\n\n#NULL distribution of each cluster is created /n\n#by the frequency of Rho from `r itt_of_permute` permutations)\n\n#```{r empirical test for Rho using permutation test  }\n\n\n#//////////////////\n# Permutation Test\n#//////////////////\n\nempi.rho.2 <- function(data,startCol){\n  # Input data is required following variables ; \n  #  id, dtname, var, val, \n  #\n  for(i in 1:itt_of_permute){\n    if(i!=1){\n      mstSfl <- ddply(    \n        ## apply 'varSfl'(Shufling variables) function \n        ## to data by 'id'*'dtname'\n        data,.(id,dtname),\n        varSfl,sfl=TRUE,startCol=startCol,endCol=length(data))#,.progress='text')\n        ## data must be numeric in cols from 'startCol' to 'endCol' \n    } else {\n      mstSfl <- data\n      ## if first itteration by 'id' or 'dtname' then don't varSfl\n    }\n    if (rho.interTemporal==TRUE){\n      mstSflLong <- mstSfl %>%\n        gather(var,val,starts_with('d_')) %>%\n        spread(dtname,val) %>%\n        mutate(\n          var.prt = match( var, \n                           names(\n                             data %>%\n                               dplyr::select(\n                                 starts_with('d_')\n                               )\n                           )\n          ),\n          var.trc = var.prt + delay\n        )\n    }else{\n      mstSflLong <- mstSfl %>%\n        gather(var,val,one_of(cols)) %>%\n        spread(dtname,val) %>%\n        mutate(\n          var.prt = match( var, \n                           names(\n                             data %>%\n                               dplyr::select(\n                                 one_of(cols)\n                               )\n                           )\n          ),\n          var.trc = var.prt # + delay ## Comment-out modification for Simu.PG\n        )\n    }\n    delayMstSflLong <- inner_join( \n      # inner_join deletes protrusion time point\n      mstSflLong %>% rename(var.new=var.prt) %>%\n        dplyr::select(id,prt,var.new) ,\n      mstSflLong %>% rename(var.new=var.trc) %>%\n        dplyr::select(id,trc,var.new) ,\n      \n      by=c('id','var.new')\n    )\n    GQSfled <-  ddply(\n      delayMstSflLong,.(),cor.test_by.id,'prt','trc'\n    )\n    \n    #,.progress='text')\n    GQSfled$itt <- i\n    \n    if(i==1){\n      GQSfled_i <- GQSfled\n    }else{\n      GQSfled_i <- rbind(GQSfled,GQSfled_i)\n    }\n    #print(i)\n  }\n  #for\n  return(GQSfled_i)\n}\n\n\nsim.dat <- rbind(\n  rbind(\n    sim_norm_10000_trc,\n    sim_norm_10000_prt\n  )\n  ) %>%\n  mutate(id = paste('SimNo.',count2,sep='')) %>%\n  dplyr::select(-count2) \n\n\noutput.empi.rho <- ddply(sim.dat %>%\n                           dplyr::select(\n                             -var.new,-var.ori#,\n                             #-rho.bw.tp,-p.bwtp\n                             ) %>% \n                           spread(key=var,value=val) %>%\n                           rename(\n                             edges=id,\n                             id=gene\n                             ) %>%\n                           dplyr::select(\n                           #rho.which,\n                           edges,id,dtname,one_of(cols)\n                           ),\n                         .(\n                         #rho.which,\n                         edges),\n                         empi.rho.2, startCol=5,\n                         .progress = 'text'\n                         ) %>%\n  ddply(\n          .(\n           #rho.which ,\n           edges\n           ) ,\n          my.rank ,\n          'rho.est'\n          ) %>%\n  mutate(\n    p_value = 1-(rank / itt_of_permute)\n  ) \n\nQ.value_for_Rho <- function(output.empi.rho){\n  output.empi.rho.which.q <- output.empi.rho %>%\n    filter(itt==1 ) %>%\n     # group_by(\n     # rho.which\n     #)\n     # %>%\n    mutate(\n      q_value          = p.adjust(p_value,method = 'BH'),\n      q_value.spearman = p.adjust(pvalue ,method = 'BH')\n    ) %>%\n    mutate(\n      Flg_FDR.pt = ifelse(\n        q_value < 0.05,1,0\n      ),\n      Flg_FDR.sp = ifelse(\n        q_value.spearman < 0.05,1,0\n      ),\n      Flg_pval.pt = ifelse(\n        p_value < 0.05,1,0\n      ),\n      Flg_pval.sp = ifelse(\n        pvalue < 0.05,1,0\n      )\n    )  %>%\n    ungroup() %>%\n    data.frame()\n  return(output.empi.rho.which.q)\n}\noutput.empi.rho.which.q <- ddply(\n  output.empi.rho,\n  .(\n   #rho.which\n   ),\n  Q.value_for_Rho\n  )\n\noutput.empi.rho.which.q <- inner_join(\n    output.empi.rho,\n    output.empi.rho.which.q %>%\n      dplyr::select(\n        edges,\n        #rho.which,\n        q_value,\n        q_value.spearman,\n        starts_with('Flg')\n        ),\n    by=c(\n     'edges'#,'rho.which'\n     )\n   )\n\n#---\n\nwrite.csv2(\n  output.empi.rho.which.q ,\n          file=sprintf(\n            '%s%s_%s_%s_Q.val.csv',\n            outputDirectry.prefix,\n            outprefix,\n            bioproc,\n            permuted_Rho.csv.prefix\n          ) \n)\nwrite.csv2(\n  output.empi.rho.which.q %>%\n    filter(itt==1),\n  file=sprintf(\n    '%s%s_%s_%s_Q.val_observed.csv',\n    outputDirectry.prefix,\n    outprefix,\n    bioproc,\n    permuted_Rho.csv.prefix\n  ) \n)\n\n#```\n\n#```{r Histogram}\n## Histogram\n\nqtl.empi.rho <- output.empi.rho.which.q %>%\n  ddply(\n   .(\n    edges #,\n    #rho.which\n    ),\n    my.qtl,\n    'rho.est'\n    ) %>%\n  rename(\n    Q.025=V1,\n    Q.050=V2,\n    Q.950=V3,\n    Q.975=V4\n  ) %>%\n  gather(var,val,Q.950)#starts_with('Q'))\n\ndf.perm_null_rho_histo <- inner_join(\n  qtl.empi.rho,\n  output.empi.rho.which.q %>%\n    distinct(\n     #rho.which,\n     edges,\n     itt\n     ) %>%\n    dplyr::select(\n      starts_with('rho'), \n      edges,\n      itt,\n      starts_with('p'),\n      starts_with('q'),\n      starts_with('Flg')\n      ),\n  by=c(\n   #'rho.which',\n   'edges')\n  ) #%>%\n#  filter(\n#    Flg_pval.pt==1 | Flg_pval.sp==1\n#  )\n\nperm_null_rho_histo <- function( data){\n  \n  edges <- unique(data$edges)\n  \n  p     <- ggplot(data ,aes(x=rho.est))\n  p     <- p + geom_histogram(position='identity',binwidth = 0.01)\n  \n  gVline   <- geom_vline(\n    aes(\n      xintercept = rho.est,\n      colour     = 'red',\n      linetype='Observed'),\n    data = data %>%\n      filter(itt==1),\n    show_guide=T\n  ) \n  \n  qtlVline <- geom_vline( \n    aes(\n      xintercept = val,\n      linetype=var\n    ),\n    data=data[,c('var','val')] ,\n    show_guide=T\n  ) \n  \n  \n  legend.title <- labs(\n    title=paste('null dist. of Rhos from ',\n                itt_of_permute,\n                ' permutations;',edges,sep=''),\n    linetype='vert.lines'\n  )\n  legend.theme <- theme(\n    legend.text = element_text(size = 20, colour = \"black\", angle = 45),\n    strip.text.x = element_text(size =20, colour = \"black\", angle = 0),\n    legend.background=element_blank(),\n    panel.grid.major=element_blank(), \n    panel.grid.minor=element_blank(), \n    panel.background=element_rect(colour=\"black\", fill=\"white\"))\n  \n  gg.result <- p + gVline + qtlVline + legend.theme + legend.title\n  plot(gg.result)\n  \n}\npdf(\n  sprintf(\n    '%s%s_%s_%s.pdf',\n    outputDirectry.prefix,\n    outprefix,\n    bioproc,\n    perm_null_rho_histo.pdf.prefix\n  )\n)\nperm.rho.histo <- dlply(\n  df.perm_null_rho_histo,\n  .(\n   #rho.which,\n   edges\n   ),\n  perm_null_rho_histo\n)\ndev.off() ## pdf(perm_null_rho_histo)\n\n#```\n",
    "created" : 1507861765854.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2376998180",
    "id" : "C3E13353",
    "lastKnownWriteTime" : 1508066146,
    "last_content_update" : 1508066146176,
    "path" : "~/Dropbox/Research_project/Time_Delayed_Correlation/Selevsek_2015/Analysis/PG/Simulation/Permu.test/simu.permtest_test_20160817_args.R",
    "project_path" : "simu.permtest_test_20160817_args.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}